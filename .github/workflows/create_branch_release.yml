---
  name: Generate branch release
  
  on:
    workflow_dispatch:
      inputs:
        domain:
          description: 'Domain'
          required: true
          type: choice
          options:
            - technology
        subdomain:
          description: 'Subdomain'
          required: true
          type: string
        destination:
          description: 'Destination'
          required: true
          type: string
        version_type:
          description: 'Version Type'
          required: true
          type: choice
          options:
            - patch
            - minor
            - major
        deploy_stg:
          type: boolean
          description: 'Deploy in STG'
          required: false
          
  
  run-name: Generate branch release [${{ inputs.domain }} / ${{ inputs.subdomain }} / ${{ inputs.destination }} ] Version type :${{ inputs.version_type }} by @${{ github.actor }}
  
  env:
    PREFIX_REPO: '${{inputs.domain}}-${{inputs.subdomain}}-${{inputs.destination}}'

  jobs:
    get_last_tag:
      # The type of runner that the job will run on
      if: ${{ github.ref_name == 'main'}}
      runs-on: ubuntu-latest
      environment:
        name: env-demo
      outputs:
        next_rc_version: ${{  steps.validate_exists_branch.outputs.new_rc_version_validate || steps.generate_tag_rc.outputs.new_rc_version }}
      steps:
        - name: Display Branch Name
          run: |
            echo "Current Branch: ${{ github.ref }}"
        - name: Display Branch Name
          run: |
            echo "Current branch: ${GITHUB_REF##*/}"
        - name: Display Branch Name github.ref_name
          run: |
            echo "Current branch: ${{github.ref_name}}"
          
          
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
        
        - name: 'Get Previous tag'
          id: previoustag
          uses: "WyriHaximus/github-action-get-previous-tag@v1"
          with:
            prefix: '${{ env.PREFIX_REPO }}-v'
            fallback: '${{ env.PREFIX_REPO }}-v0.0.0' # Optional fallback tag to use when no tag can be found
  
        - name: Get last tag Step
          run: echo "Get last tag OK ${{ steps.previoustag.outputs.tag }}"
        
        - name: Get last stable release by TAG
          id: get_last_release
          working-directory: ./.github/scripts
          run: |
            chmod +x get_last_release_by_tag.sh
            ./get_last_release_by_tag.sh ${{github.repository}} ${{ env.PREFIX_REPO }}
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
             
        - name: Print last stable release TAG
          run: echo "Last release by TAG ${{ steps.get_last_release.outputs.name }}" 
        
        - name: Get SemVer from release
          id: semver_release_step        
          run: |
            version_number="0.0.0"
            echo "Last Release ${{ steps.get_last_release.outputs.name }}"  
            if [ ${{ steps.get_last_release.outputs.name }} ]; then
              version_number=$(echo ${{ steps.get_last_release.outputs.name}} | awk -F'-v' '{print $2}')          
            fi
            echo "semver_release=$version_number" >> $GITHUB_OUTPUT
        
        - name: 'Get all next version'
          id: semvers
          uses: "WyriHaximus/github-action-next-semvers@v1"
          with:
            version: ${{ steps.semver_release_step.outputs.semver_release }}
  
        - name: Get next release version
          id: get_next_release_version
          run: |
            case "${{inputs.version_type}}" in
                major)
                    echo "new_release_version=${{ env.PREFIX_REPO }}-v${{steps.semvers.outputs.major }}"  >> $GITHUB_OUTPUT
                    ;;
                minor)
                    echo "new_release_version=${{ env.PREFIX_REPO }}-v${{steps.semvers.outputs.minor }}"  >> $GITHUB_OUTPUT
                    ;;
                patch)
                    echo "new_release_version=${{ env.PREFIX_REPO }}-v${{steps.semvers.outputs.patch }}"  >> $GITHUB_OUTPUT
                    ;;
                *)
                    echo "$parametro no es major, minor, ni patch"
                    ;;
            esac
            echo new_release_version   
        - name: Diff between next release and last tag semver
          id: generate_tag_rc
          run: |
            last_tag_semver=$(echo "${{ steps.previoustag.outputs.tag}}" | awk -F'-rc.' '{print $1}')
            rc=1
            if [ "$last_tag_semver" = "${{steps.get_next_release_version.outputs.new_release_version}}" ]; then
              rc=$(echo ${{ steps.previoustag.outputs.tag }} | awk -F'-rc.' '{print $2}')
              ((rc++))
            fi
  
            new_rc_version="${{steps.get_next_release_version.outputs.new_release_version}}-rc.$rc"
            echo "new_rc_version=$new_rc_version" >> $GITHUB_OUTPUT

        - name: Print next release candidate
          run: echo ${{ steps.generate_tag_rc.outputs.new_rc_version }}
        
        - name: validate if branch exists
          id: validate_exists_branch
          run: |
            exists_branch=$(git branch -r | grep "release/${{ steps.generate_tag_rc.outputs.new_rc_version }}" || true)
            if [ -n "$exists_branch" ]; then
              latest_branch=$(git for-each-ref --sort=-refname --format='%(refname:short)' refs/remotes/ | grep "^origin/release/${{steps.get_next_release_version.outputs.new_release_version}}-rc." | head -n 1 || true)
              last_rc=$(echo "$latest_branch" | awk -F'-rc.' '{print $2}')
              ((last_rc++))
              echo "new_rc_version_validate=${{steps.get_next_release_version.outputs.new_release_version}}-rc.$last_rc" >> $GITHUB_OUTPUT
            fi
        - name: Result Validate Branch
          run: |
            echo "Output ${{ steps.validate_exists_branch.outputs.new_rc_version_validate }}"

    create_branch:
      needs: ['get_last_tag']
      runs-on: ubuntu-latest
      outputs: 
        release_branch_name: "release/${{ needs.get_last_tag.outputs.next_rc_version}}"
      steps:
        - uses: peterjgrainger/action-create-branch@v3.0.0
          id: create_branch
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            branch: release/${{ needs.get_last_tag.outputs.next_rc_version}}
        - name: Validate Branch
          if: ${{ steps.create_branch.outputs.created == 'false' }}
          run: |
            echo "Ya existe la rama: release/${{ needs.get_last_tag.outputs.next_rc_version}}"
            exit 1
        - name: Get Branch Name
          if: ${{ steps.create_branch.outputs.created == 'true' }}
          run: |
            echo "Branch generado:  release/${{ needs.get_last_tag.outputs.next_rc_version}}"
    
    deploy_stg:
      if: ${{ inputs.deploy_stg }}
      needs: ['create_branch']
      runs-on: ubuntu-latest
      steps:

        - name: JSON
          run: echo ${{ toJSON(github.event.sender) }}
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0

        - name: Call workflow New Release Flow Auto Version
          run: |
            gh workflow run release.yml  -f domain=${{ inputs.domain }} -f subdomain=${{ inputs.subdomain }} -f destination=${{ inputs.destination }} -f version_type=${{ inputs.version_type }} --ref=${{ needs.create_branch.outputs.release_branch_name}}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        my_actor: ${{ github.actor }} 
            
          
        
