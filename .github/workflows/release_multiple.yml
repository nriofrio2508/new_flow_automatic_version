# This is a basic workflow to help you get started with Actions

name: Deploy Multi release

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain'
        required: true
        type: choice
        options:
          - dominio1
          - dominio2
          - technology
      subdomain:
        description: 'Subdomain'
        required: true
        type: string
      destination:
        description: 'Destination'
        required: true
        type: string
      version_type:
        description: 'Version Type'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
      actor:
        required: false
        description: 'Leave Empty'


run-name:  Deploy [${{ inputs.domain }} / ${{ inputs.subdomain }} / ${{ inputs.destination }} ] Version type :${{ inputs.version_type }} by @${{ github.event.sender.type == 'Bot' && inputs.actor || github.actor }}

env:
  PREFIX_REPO: '${{inputs.domain}}-${{inputs.subdomain}}-${{inputs.destination}}'
  USER_ACTOR:  ${{ github.event.sender.type == 'Bot' && inputs.actor || github.actor }}
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"

  get_dynamic_jobs:
    runs-on: ubuntu-latest
    outputs:
      jobs: ${{ steps.generate_matrix.outputs.jobs}}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      #find . -mindepth 3 -maxdepth 3 -type d | grep -Ev "/(${BLACKLIST_PATTERN})($|/)"
      - name: Get 3th level
        id: generate_matrix
        run: |
          BLACKLIST=("demo" "dominio1")
          BLACKLIST_PATTERN=$(IFS=\|; echo "${BLACKLIST[*]}")
          DIRECTORIES=$(find . -mindepth 3 -maxdepth 3 -type d | grep -E "^./(${BLACKLIST_PATTERN})/.*" | sed 's|^\./||')      
          DIRECTORIES_WITH=$(echo "$DIRECTORIES" | sed 's/\//-/g')
          JOBS="jobs=[$(echo "$DIRECTORIES_WITH" | sed 's/^/"/;s/$/"/' | tr '\n' ',')]"
          echo "$JOBS" >> "$GITHUB_OUTPUT"
      #DIRECTORIES_WITH=$(echo "$DIRECTORIES" | sed 's/\//-/g')
      - name: print
        run: |
          echo ${{ steps.generate_matrix.outputs.jobs}}
      
    
  get_last_tag:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: get_dynamic_jobs
    environment:
      name: stg-multi
    strategy:
      fail-fast: false
      matrix:
        dominio: ${{ fromJSON(needs.get_dynamic_jobs.outputs.jobs) }}
    outputs:
      last_tag_repo: ${{steps.previoustag.outputs.tag}}
      next_tag_repo: ${{ steps.generate_tag_rc.outputs.new_rc_version }}
      last_stable_release: ${{ steps.get_last_release.outputs.name || '' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      #find . -mindepth 3 -maxdepth 3 -type d | grep -Ev "/(${BLACKLIST_PATTERN})($|/)"

      - name: fix
        run: |
          if [ "${{ matrix.dominio }}" = "dominio1-mi_subdominio-path3" ]; then
            exit 1
          fi
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@04e8485ecb6487243907e330d522ff60f02283ce"
        with:
          prefix: '${{ matrix.dominio }}-v'
          fallback: '${{ matrix.dominio }}-v0.0.0' # Optional fallback tag to use when no tag can be found

      - name: Get last tag Step
        run: echo "Get last tag OK ${{ steps.previoustag.outputs.tag }}"    

      - name: Get last stable release by TAG
        id: get_last_release
        working-directory: ./.github/scripts
        run: |
          chmod +x get_last_release_by_tag.sh
          ./get_last_release_by_tag.sh ${{github.repository}} ${{ matrix.dominio }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Print last stable release TAG
        run: echo "Get last tag OK ${{ steps.get_last_release.outputs.name }}"
      - name: Print PATH
        run: ls    
       
      - name: Get SemVer from release
        id: semver_release_step        
        run: |
          version_number="0.0.0"
          echo "Last Release ${{ steps.get_last_release.outputs.name }}"  
          if [ ${{ steps.get_last_release.outputs.name }} ]; then
            version_number=$(echo ${{ steps.get_last_release.outputs.name}} | awk -F'-v' '{print $2}')          
          fi
          echo "semver_release=$version_number" >> $GITHUB_OUTPUT
      
      - name: 'Get all next version'
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@d079934efaf011a4cf8912d4637097fe35d32b93"
        with:
          version: ${{ steps.semver_release_step.outputs.semver_release }}

      - name: Get next release version
        id: get_next_release_version
        run: |
          case "${{inputs.version_type}}" in
              major)
                  echo "new_release_version=${{ matrix.dominio }}-v${{steps.semvers.outputs.major }}"  >> $GITHUB_OUTPUT
                  ;;
              minor)
                  echo "new_release_version=${{ matrix.dominio }}-v${{steps.semvers.outputs.minor }}"  >> $GITHUB_OUTPUT
                  ;;
              patch)
                  echo "new_release_version=${{ matrix.dominio }}-v${{steps.semvers.outputs.patch }}"  >> $GITHUB_OUTPUT
                  ;;
              *)
                  echo "$parametro no es major, minor, ni patch"
                  ;;
          esac
          echo new_release_version
      
      - name: Diff between next release and last tag semver
        id: generate_tag_rc
        run: |
          last_tag_semver=$(echo "${{ steps.previoustag.outputs.tag}}" | awk -F'-rc.' '{print $1}')
          rc=1
          if [ "$last_tag_semver" = "${{steps.get_next_release_version.outputs.new_release_version}}" ]; then
            rc=$(echo ${{ steps.previoustag.outputs.tag }} | awk -F'-rc.' '{print $2}')
            ((rc++))
          fi

          new_rc_version="${{steps.get_next_release_version.outputs.new_release_version}}-rc.$rc"
          echo "new_rc_version=$new_rc_version" >> $GITHUB_OUTPUT
      - name: Generate JSON
        run: |
          echo '{"last_tag_repo": "${{steps.previoustag.outputs.tag}}" , "next_tag_repo": "${{ steps.generate_tag_rc.outputs.new_rc_version }}", "last_stable_release": "${{ steps.get_last_release.outputs.name }}" }'> "${{ matrix.dominio }}.json"
      - name: Upload pre release  
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: ${{ matrix.dominio }}
          path: "${{ matrix.dominio }}.json"
          retention-days: 1
  
  mi_job:
    needs: [ get_last_tag,get_dynamic_jobs]
    strategy:
      matrix:
        dominio: ${{ fromJSON(needs.get_dynamic_jobs.outputs.jobs) }}
    uses: nriofrio2508/my_reusable/.github/workflows/call_other_workflow.yml@main
    secrets: inherit
      
  validate_deploy:
    runs-on: ubuntu-latest
    needs: [get_last_tag,mi_job]
    steps:
      - name: Hello
        run: echo "deploy ok"
      - name: print matrix
        run: echo ${{ toJson(needs.get_last_tag.outputs.matrix)}}
      
      - name: Get Job ID from GH API
        id: get-job-id
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          jobs=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id}}/attempts/${{ github.run_attempt }}/jobs)
          echo $jobs
          job_id=$(echo $jobs | jq -r '.jobs[] | select(.name=="get_last_tag") | .id')
          echo "job_id=$job_id" >> $GITHUB_OUTPUT
      - name: print job_id
        run: |
          echo "JOB ID: ${{ steps.get-job-id.outputs.job_id }}"
      - name: check the jobs # get the matrix job status and combination info jobstatus=$(curl -X GET -s -u "admin:${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs/ | jq ".jobs[] | {job_status: .conclusion, matrix: .name}")
        run: |
          jobstatus=$(curl -X GET -s -u "admin:${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/jobs/${{ steps.get-job-id.outputs.job_id}} | jq "{job_status: .conclusion, matrix: .name}")
          echo $jobstatus
                

  generate_pre_release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dominio: ${{ fromJSON(needs.get_dynamic_jobs.outputs.jobs) }}
    needs: [validate_deploy, get_last_tag,get_dynamic_jobs] 
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4.1.9
        with:
          name: ${{ matrix.dominio }}
      
      - name: Outputs 
        id: outputs_matrix
        run: |
          last_tag_repo=$(jq -r '.last_tag_repo' ${{ matrix.dominio }}.json)
          next_tag_repo=$(jq -r '.next_tag_repo' ${{ matrix.dominio }}.json)
          last_stable_release=$(jq -r '.last_stable_release' ${{ matrix.dominio }}.json)
          echo "last_tag_repo=$last_tag_repo" >> $GITHUB_OUTPUT
          echo "next_tag_repo=$next_tag_repo" >> $GITHUB_OUTPUT
          echo "last_stable_release=$last_stable_release" >> $GITHUB_OUTPUT
          echo "domain=$(echo $next_tag_repo | cut -d'-' -f1)" >> $GITHUB_OUTPUT
          echo "subdomain=$(echo $next_tag_repo | cut -d'-' -f2)" >> $GITHUB_OUTPUT
          echo "destination=$(echo $next_tag_repo | cut -d'-' -f3)" >> $GITHUB_OUTPUT

      - name: Push new Tag ReleaseCandidate
        id: tag_release_candidate
        run: |
          tag='${{ steps.outputs_matrix.outputs.next_tag_repo }}'
          message='${{ steps.outputs_matrix.outputs.next_tag_repo }}'
          git config user.name "${{ env.USER_ACTOR }}"
          git config user.email "${{ env.USER_ACTOR }}@users.noreply.github.com"
          git tag -a "${tag}" -m "${message}"
          git push origin "${tag}"
          echo "TAG_RELEASE_CANDIDATE=$tag" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Changelog
        id: build_changelog
        working-directory: ./.github/scripts
        run: |
          chmod +x get_changelog.sh
          {
            echo 'changelog<<EOF'
            ./get_changelog.sh "${{ steps.outputs_matrix.outputs.last_stable_release || '' }}" "${{ steps.outputs_matrix.outputs.next_tag_repo }}" ${{github.repository}} false true "-- ${{steps.outputs_matrix.outputs.domain}}/${{steps.outputs_matrix.outputs.subdomain}}/${{steps.outputs_matrix.outputs.destination}}"
             echo EOF
          } >> "GITHUB_OUTPUT"

      - name: Create PreRelease        
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: true
          tag_name: '${{ steps.outputs_matrix.outputs.next_tag_repo }}'
          release_name: '${{ steps.outputs_matrix.outputs.next_tag_repo }}'
          body: |
            Actor: ${{ env.USER_ACTOR }}
            ActionRunner: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            ${{ steps.build_changelog.outputs.changelog }}

  promote_prd:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: generate_pre_release
    environment: promote_prd
    steps:
      - name: Promote prd step
        run: echo "waiting approve"

  generate_release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dominio: ${{ fromJSON(needs.get_dynamic_jobs.outputs.jobs) }}
    needs: [promote_prd,get_last_tag,get_dynamic_jobs]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4.1.9
        with:
          name: ${{ matrix.dominio }}
      
      - name: Outputs 
        id: outputs_matrix
        run: |
          last_tag_repo=$(jq -r '.last_tag_repo' ${{ matrix.dominio }}.json)
          next_tag_repo=$(jq -r '.next_tag_repo' ${{ matrix.dominio }}.json)
          last_stable_release=$(jq -r '.last_stable_release' ${{ matrix.dominio }}.json)
          echo "last_tag_repo=$last_tag_repo" >> $GITHUB_OUTPUT
          echo "next_tag_repo=$next_tag_repo" >> $GITHUB_OUTPUT
          echo "last_stable_release=$last_stable_release" >> $GITHUB_OUTPUT
          echo "domain=$(echo $next_tag_repo | cut -d'-' -f1)" >> $GITHUB_OUTPUT
          echo "subdomain=$(echo $next_tag_repo | cut -d'-' -f2)" >> $GITHUB_OUTPUT
          echo "destination=$(echo $next_tag_repo | cut -d'-' -f3)" >> $GITHUB_OUTPUT
      - name: Get last stable release by TAG
        id: get_last_release
        working-directory: ./.github/scripts
        run: |
          chmod +x get_last_release_by_tag.sh
          ./get_last_release_by_tag.sh ${{github.repository}} ${{ matrix.dominio }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Print last stable release TAG
        run: echo "Get last tag OK ${{ steps.get_last_release.outputs.name }}"

      - name: Get name new Release
        id: get_name_new_release
        run: |
          new_release=$(echo ${{ steps.outputs_matrix.outputs.next_tag_repo }} | awk -F '-rc.' '{print $1}' )
          echo "new_name_release=$new_release" >> $GITHUB_OUTPUT
      
      - name: Push new Tag ReleaseCandidate
        id: tag_release_candidate
        run: |
          tag='${{ steps.get_name_new_release.outputs.new_name_release }}'
          message='${{ steps.get_name_new_release.outputs.new_name_release }}'
          git config user.name "${{ env.USER_ACTOR }}"
          git config user.email "${{ env.USER_ACTOR }}@users.noreply.github.com"
          git tag -a "${tag}" -m "${message}"
          git push origin "${tag}"
          echo "TAG_RELEASE_CANDIDATE=$tag" >> $GITHUB_OUTPUT
      
      - name: Build Changelog        
        id: changelog_prd
        working-directory: ./.github/scripts
        run: |
          chmod +x get_changelog.sh
          {
            echo 'changelog<<EOF'
            ./get_changelog.sh ${{ steps.get_name_new_release.outputs.new_name_release}} "${{ steps.get_last_release.outputs.name || ''}}" ${{github.repository}} false true ${{steps.outputs_matrix.outputs.domain}}/${{steps.outputs_matrix.outputs.subdomain}}/${{steps.outputs_matrix.outputs.destination}}
          } >> "GITHUB_OUTPUT"

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.get_name_new_release.outputs.new_name_release }}'
          release_name: '${{ steps.get_name_new_release.outputs.new_name_release }}'
          body: |
            Actor: ${{ env.USER_ACTOR }}
            ActionRunner: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            ${{ steps.changelog_prd.outputs.changelog }}

  validate_deploy_prd:
    # The type of runner that the job will run on COMENTARIOS PARA 5
    runs-on: ubuntu-latest
    needs: generate_release
    steps:
      - name: Validate deploy prd
        run: echo "validate deploy PRD OK"
