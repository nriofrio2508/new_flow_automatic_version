# This is a basic workflow to help you get started with Actions

name: Deploy release

# Controls when the workflow will run
on:  
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain'
        required: true
        type: choice
        options:
          - domain1
          - domain2
          - domain3
        default: 'domain1'

      subdomain:
        description: 'Subdomain'
        required: true
        type: string
        default: 'subdomain1'     

      destino:
        description: 'Destino'
        required: true
        type: string
        default: 'destino1'  
      
      tipo_cambio:
        description: 'Seleccione tipo cambio'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"

  validate_deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      - name: Validate deploy Step
        run: echo "Validate deploy OK"

  get_last_tag:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: validate_deploy
    outputs:
      last_tag_repo: ${{steps.previoustag.outputs.tag}}
      next_tag_repo: '${{inputs.domain}}_${{inputs.subdomain}}_${{inputs.destino}}-v${{steps.semvers.outputs.patch}}'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          prefix: '${{inputs.domain}}_${{inputs.subdomain}}_${{inputs.destino}}-v'
          fallback: '${{inputs.domain}}_${{inputs.subdomain}}_${{inputs.destino}}-v0.0.0' # Optional fallback tag to use when no tag can be found
      - name: Get last tag Step
        run: echo "Get last tag OK ${{ steps.previoustag.outputs.tag }}"

      - name: other last
        uses: rmeneely/git-last-tag@v1
        id: new_last
        with:
          # Tag pattern. The filter to use when searching for the LAST_VERSION tag
          # Optional
          # Default: 'v[0-9]*.[0-9]*.[0-9]*'
          tag_pattern: '${{inputs.domain}}_${{inputs.subdomain}}_${{inputs.destino}}-v.*-rc.[0-9]+'
          # Ignore tag pattern: Exclude matching tags from the tag pattern
          # Optional
      
      - name: Get NEW last tag Step
        run: echo "Get NEW tag OK ${{ steps.new_last.outputs.LAST_TAG }}"

      - name: Get only numbers version
        id: version_number_step
        run: |
          version_number=$(echo ${{ steps.previoustag.outputs.tag }} | awk -F'-v' '{print $2}')
          echo $version_number
          echo "version_number=$version_number" >> $GITHUB_OUTPUT
      
      - name: 'Get next minor version'
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.version_number_step.outputs.version_number }}

      - name: Get next tag Step
        run: echo "Next last tag OK ${{ steps.semvers.outputs.patch }}"
        
        
  generate_pre_release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: get_last_tag
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Push new Tag ReleaseCandidate
        id: tag_release_candidate
        run: |
          tag='${{ needs.get_last_tag.outputs.next_tag_repo }}-rc.1'
          message='${{ needs.get_last_tag.outputs.next_tag_repo }}'
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a "${tag}" -m "${message}"
          git push origin "${tag}"
          echo "TAG_RELEASE_CANDIDATE=$tag" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Create changelog"
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          ignorePreReleases: "true"
          fromTag: ${{ needs.get_last_tag.outputs.last_tag_repo }}
          toTag: ${{ needs.get_last_tag.outputs.next_tag_repo }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create PreRelease
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: true
          tag_name: '${{ needs.get_last_tag.outputs.next_tag_repo }}-rc.1'
          release_name: '${{ needs.get_last_tag.outputs.next_tag_repo }}-rc.1'
          body: |
            Actor: ${{ github.actor }}
            ActionRunner: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            ${{ steps.build_changelog.outputs.changelog }}
  promote_prd:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: generate_pre_release
    environment: promote_prd
    steps:
      - name: Promote prd step
        run: echo "waiting approve"

  generate_release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: promote_prd
    steps:
      - name: Generate release
        run: echo "Generate release OK"

  validate_deploy_prd:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: generate_release
    steps:
      - name: Validate deploy prd
        run: echo "validate deploy PRD OK"
