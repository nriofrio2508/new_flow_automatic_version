# This is a basic workflow to help you get started with Actions

name: Deploy release

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain'
        required: true
        type: choice
        options:
          - dominio1
          - dominio2
          - technology
      subdomain:
        description: 'Subdomain'
        required: true
        type: string
      destination:
        description: 'Destination'
        required: true
        type: string
      version_type:
        description: 'Version Type'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch

run-name: Deploy [${{ inputs.domain }} / ${{ inputs.subdomain }} / ${{ inputs.destination }} ] Version type :${{ inputs.version_type }} by @${{ github.actor }}

env:
  PREFIX_REPO: '${{inputs.domain}}-${{inputs.subdomain}}-${{inputs.destination}}'
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  get_last_tag:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment:
      name: stg-demo

    outputs:
      last_tag_repo: ${{steps.previoustag.outputs.tag}}
      next_tag_repo: ${{ steps.generate_tag_rc.outputs.new_rc_version }}
      last_stable_release: ${{ steps.get_last_release.outputs.name || '' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          prefix: '${{ env.PREFIX_REPO }}-v'
          fallback: '${{ env.PREFIX_REPO }}-v0.0.0' # Optional fallback tag to use when no tag can be found

      - name: Get last tag Step
        run: echo "Get last tag OK ${{ steps.previoustag.outputs.tag }}"
      
      - name: Get last stable release
        uses: cardinalby/git-get-release-action@v1
        id: get_last_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseNameRegEx: "${{ env.PREFIX_REPO }}-v*"
          prerelease: false
          doNotFailIfNotFound: true
      - name: Get stable release GH
        run: |
          gh release list --limit 30 --exclude-pre-releases --json tagName --jq '.[] | select(.tagName | startswith("${{ env.PREFIX_REPO }}-v")) | .tagName' > releases.json
          gh release list --json tagName  > all_releases.json
          cat releases.json
          cat all_releases.json
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate 10 k release
        if: false
        run: |
          control=0
          for i in $(seq 1 10000); do
            tag_name="version0.0.$i"
            git tag "$tag_name"
            
            if [ "$control" -eq 500 ]; then
              control=0
              git push --tags
            fi
            control=$((control + 1))
          done
          
          # Empujar los tags restantes
          git push --tags
      - name: Create 10 k release
        if: false
        run: |
          for i in $(seq 1 10000); do
            tag_name="version0.0.$i"
            gh release create "$tag_name"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: get release by TAG
        run: |
          tags=$(git tag -l '${{ env.PREFIX_REPO }}-v*' --sort=-taggerdate | grep -E '^${{ env.PREFIX_REPO }}-v[0-9]+\.[0-9]+\.[0-9]+$')
          for tag in $tags; do
            echo "$tag"
            response=$(gh api -H "Accept: application/vnd.github.v3+json" "/repos/${{github.repository}}/releases/tags/$tag" || true)
            echo "$response" | jq .
            if echo "$response" | jq -e '.status' > /dev/null 2>&1; then
              continue
            fi
            
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release API
        if: false
        id: get_last_release_api
        run: |
            page=1
            per_page=100
            while : ;do
              response=$(gh api -H "Accept: application/vnd.github.v3+json" "/repos/${{github.repository}}/releases?per_page=$per_page&page=$page")
              echo "$page"             
              if  echo "$response" | jq -e 'if length == 0 then true else false end'  > /dev/null ; then
                echo "No se encontraron mas recursos"
                echo "result_next_last_api=${{ env.PREFIX_REPO }}-v0.0.0" >> $GITHUB_OUTPUT
                break
              else
                response_filter=$(echo "$response" | jq '.[] | select(.tag_name | startswith("${{ env.PREFIX_REPO }}-v")) | select(.prerelease == false) | select(.draft == false) | .tag_name' | head -n 1 )
              fi

              if [ -n "$response_filter" ]; then
                 echo "result_next_last_api=$response_filter" >> $GITHUB_OUTPUT
                break
              fi
              ((page++))
            done          
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Print last release API
        run:
          echo "last release API ${{ steps.get_last_release_api.outputs.result_next_last_api}}"
      - name: Print last stable release
        run: echo "Get last tag OK ${{ steps.get_last_release.outputs.name }}"    
       
      - name: Get SemVer from release
        id: semver_release_step        
        run: |
          version_number="0.0.0"
          echo "Last Release ${{ steps.get_last_release.outputs.name }}"  
          if [ ${{ steps.get_last_release.outputs.name }} ]; then
            version_number=$(echo ${{ steps.get_last_release.outputs.name}} | awk -F'-v' '{print $2}')          
          fi
          echo "semver_release=$version_number" >> $GITHUB_OUTPUT
      
      - name: 'Get all next version'
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.semver_release_step.outputs.semver_release }}

      - name: Get next release version
        id: get_next_release_version
        run: |
          case "${{inputs.version_type}}" in
              major)
                  echo "new_release_version=${{ env.PREFIX_REPO }}-v${{steps.semvers.outputs.major }}"  >> $GITHUB_OUTPUT
                  ;;
              minor)
                  echo "new_release_version=${{ env.PREFIX_REPO }}-v${{steps.semvers.outputs.minor }}"  >> $GITHUB_OUTPUT
                  ;;
              patch)
                  echo "new_release_version=${{ env.PREFIX_REPO }}-v${{steps.semvers.outputs.patch }}"  >> $GITHUB_OUTPUT
                  ;;
              *)
                  echo "$parametro no es major, minor, ni patch"
                  ;;
          esac
          echo new_release_version
      
      - name: Diff between next release and last tag semver
        id: generate_tag_rc
        run: |
          last_tag_semver=$(echo "${{ steps.previoustag.outputs.tag}}" | awk -F'-rc.' '{print $1}')
          rc=1
          if [ "$last_tag_semver" = "${{steps.get_next_release_version.outputs.new_release_version}}" ]; then
            rc=$(echo ${{ steps.previoustag.outputs.tag }} | awk -F'-rc.' '{print $2}')
            ((rc++))
          fi

          new_rc_version="${{steps.get_next_release_version.outputs.new_release_version}}-rc.$rc"
          echo "new_rc_version=$new_rc_version" >> $GITHUB_OUTPUT
      

  validate_deploy:
    runs-on: ubuntu-latest
    needs: get_last_tag
    steps:
      - name: Hello
        run: echo "deploy ok"

  generate_pre_release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [validate_deploy, get_last_tag] 
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Push new Tag ReleaseCandidate
        id: tag_release_candidate
        run: |
          tag='${{ needs.get_last_tag.outputs.next_tag_repo }}'
          message='${{ needs.get_last_tag.outputs.next_tag_repo }}'
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a "${tag}" -m "${message}"
          git push origin "${tag}"
          echo "TAG_RELEASE_CANDIDATE=$tag" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Changelog
        id: build_changelog
        uses: metcalfc/changelog-generator@v4.3.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
          head-ref: ${{ needs.get_last_tag.outputs.next_tag_repo }}
          base-ref: ${{ needs.get_last_tag.outputs.last_stable_release }}
          fetch: true
      - name: Create PreRelease
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: true
          tag_name: '${{ needs.get_last_tag.outputs.next_tag_repo }}'
          release_name: '${{ needs.get_last_tag.outputs.next_tag_repo }}'
          body: |
            Actor: ${{ github.actor }}
            ActionRunner: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            ${{ steps.build_changelog.outputs.changelog }}

  promote_prd:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: generate_pre_release
    environment: promote_prd
    steps:
      - name: Promote prd step
        run: echo "waiting approve"

  generate_release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [promote_prd,get_last_tag]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: cardinalby/git-get-release-action@v1
        id: get_last_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseNameRegEx: "${{ env.PREFIX_REPO }}-v*"
          prerelease: false
          doNotFailIfNotFound: true
      - name: Print Last release
        run: |
          echo "Ultimo release: ${{ steps.get_last_release.outputs.name }}"

      - name: Get name new Release
        id: get_name_new_release
        run: |
          new_release=$(echo ${{ needs.get_last_tag.outputs.next_tag_repo }} | awk -F '-rc.' '{print $1}' )
          echo "new_name_release=$new_release" >> $GITHUB_OUTPUT
      
      - name: Push new Tag ReleaseCandidate
        id: tag_release_candidate
        run: |
          tag='${{ steps.get_name_new_release.outputs.new_name_release }}'
          message='${{ steps.get_name_new_release.outputs.new_name_release }}'
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a "${tag}" -m "${message}"
          git push origin "${tag}"
          echo "TAG_RELEASE_CANDIDATE=$tag" >> $GITHUB_OUTPUT
      
      - name: Build Changelog
        id: changelog_prd
        uses: metcalfc/changelog-generator@v4.3.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
          head-ref: ${{ steps.get_name_new_release.outputs.new_name_release}}
          base-ref: ${{ steps.get_last_release.outputs.name || ''}} 
          fetch: true

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.get_name_new_release.outputs.new_name_release }}'
          release_name: '${{ steps.get_name_new_release.outputs.new_name_release }}'
          body: |
            Actor: ${{ github.actor }}
            ActionRunner: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            ${{ steps.changelog_prd.outputs.changelog }}

  validate_deploy_prd:
    # The type of runner that the job will run on COMENTARIOS PARA 5
    runs-on: ubuntu-latest
    needs: generate_release
    steps:
      - name: Validate deploy prd
        run: echo "validate deploy PRD OK"
