# This is a basic workflow to help you get started with Actions

name: Deploy Multi release

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version Type'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
      domain:
        description: 'Domain'
        required: true
        type: choice
        options:
          - all jobs
          - dominio1
          - dominio2
          - technology
      
      execute_only_fails:
        type: boolean
        default: false
        description: (Optional) Execute only last fail
        required: false
      workflow_id_last_fail:
        type: string
        required: false

run-name:  Deploy Multi job by @${{ github.actor }}

jobs:
  get_last_fail_jobs:
    runs-on: ubuntu-latest
    if: ${{ inputs.execute_only_fails == true  }}
    steps:
      - name: Get last fail jobs
        run: |          
          URL="https://api.github.com/repos/${{ github.repository }}/actions/workflows/release_multiple.yml/runs?page=1"
          response=$(curl -s -H "Authorization: Bearer ${{  secrets.GITHUB_TOKEN  }}" "$URL")
          last_run_id=$(echo "$response" | jq '.workflow_runs[0].id')
          last_run_attempt=$(echo "$response" | jq '.workflow_runs[0].run_attempt')
          echo "last_run_id=$last_run_id" >> "$GITHUB_OUTPUT"
          echo "last_run_attempt=$last_run_attempt" >> "$GITHUB_OUTPUT"
          echo "last_run_id $last_run_id"
          echo "last_run_attempt $last_run_attempt"

  get_list_matrix_fail:
    needs: get_last_fail_jobs
    uses: nriofrio2508/my_reusable/.github/workflows/get_status_matrix.yml@main
    with:
      status: "skipped,failure"
      job_name: "validate_deploy"
      run_id: ${{ needs.get_last_fail_jobs.outputs.last_run_id }}
      run_attempt: ${{ needs.get_last_fail_jobs.outputs.last_run_attempt }}
    
  generate_fail_matrix:
    needs: get_list_matrix_fail
    runs-on: ubuntu-latest
    outputs:
      jobs: ${{ steps.get_fail_jobs.outputs.jobs}}
    steps:
      - name: print
        id: get_fail_jobs
        run: |
          echo "resultado es ${{ needs.get_list_matrix_fail.outputs.matrix_status}}"
          valores='[]'
          if [ -n "${{ needs.get_list_matrix_fail.outputs.matrix_status}}" ]; then
            valores=($(echo "${{ needs.get_list_matrix_fail.outputs.matrix_status}}" | sed -n 's/[^)]*)/(&\n)/g;p' | grep -oP '\(\K[^)]*(?=\))' || true))
          fi
          echo "jobs=$valores" >> "$GITHUB_OUTPUT"
          echo "valores es $valores"

  get_jobs_matrix:
    runs-on: ubuntu-latest
    if: ${{ ! inputs.execute_only_fails }}
    outputs:
      jobs: ${{ steps.generate_matrix.outputs.jobs}}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get 3th level
        id: generate_matrix
        run: |
          echo "Value:${{ inputs.domain}}"
          BLACKLIST=("demo" "dominio1" "dominio2")
          if [ "${{ inputs.domain}}" != "all jobs" ]; then
            BLACKLIST=("${{ inputs.domain }}")
          fi
          BLACKLIST_PATTERN=$(IFS=\|; echo "${BLACKLIST[*]}")
          DIRECTORIES=$(find . -mindepth 3 -maxdepth 3 -type d | grep -E "^./(${BLACKLIST_PATTERN})/.*" | sed 's|^\./||')      
          DIRECTORIES_WITH=$(echo "$DIRECTORIES" | sed '/^$/d' | sed 's|/|-|g')

          # Formatear salida como lista
          if [ -z "$DIRECTORIES_WITH" ]; then
            JOBS="jobs=[]"
          else
            JOBS="jobs=[$(echo "$DIRECTORIES_WITH" | sed 's/^/"/;s/$/"/' | tr '\n' ',' | sed 's/,$//')]"
          fi
          echo "$JOBS" >> "$GITHUB_OUTPUT"
      - name: print
        run: |
          echo ${{ steps.generate_matrix.outputs.jobs}}

  get_dynamic_jobs:
    runs-on: ubuntu-latest
    needs: [get_jobs_matrix,generate_fail_matrix]
    if: ${{ always() }}
    outputs:
      jobs: ${{ steps.generate_matrix.outputs.jobs}}
    steps:
      - name: get matrix list
        id: generate_matrix
        run: |
          jobs="${{ needs.get_jobs_matrix.outputs.jobs }}"
          if [ "${{ inputs.execute_only_fails }}" = "true" ]; then
            jobs="${{ needs.generate_fail_matrix.outputs.jobs }}"
          fi
          echo "$jobs"
          echo "jobs=$jobs" >> "$GITHUB_OUTPUT"
      
  get_last_tag:
    needs: [get_dynamic_jobs,generate_fail_matrix]
    uses: nriofrio2508/my_reusable/.github/workflows/get_next_candidate_release.yml@main
    if: ${{  needs.get_dynamic_jobs.outputs.jobs != '[]' }}
    strategy:
      max-parallel: 20
      fail-fast: false
      matrix:
        dominio: ${{ fromJSON(needs.generate_fail_matrix.outputs.jobs)  }}
    with:
      version_name: ${{ matrix.dominio }}
      version_type: ${{ inputs.version_type }}
      is_matrix: true

  validate_status_matrix_get_last_tag:
    needs: [get_last_tag]
    uses: nriofrio2508/my_reusable/.github/workflows/get_status_matrix.yml@main
    secrets: inherit
    with:
      status: "success"
      job_name: "get_last_tag"
    
  validate_deploy:
    needs: [get_last_tag,validate_status_matrix_get_last_tag,get_dynamic_jobs]
    strategy:
      max-parallel: 20
      fail-fast: false
      matrix:
        dominio: ${{ fromJSON(needs.get_dynamic_jobs.outputs.jobs) }}
    uses: nriofrio2508/my_reusable/.github/workflows/validate_deploy.yml@main
    secrets: inherit
    with:
      execute_matrix: ${{ contains(needs.validate_status_matrix_get_last_tag.outputs.matrix_status, matrix.dominio )}}


  validate_status_matrix_validate_deploy:
    needs: [validate_deploy]
    uses: nriofrio2508/my_reusable/.github/workflows/get_status_matrix.yml@main
    secrets: inherit
    with:
      status: "success"
      job_name: "validate_deploy"

  generate_pre_release:
    strategy:
      max-parallel: 20
      fail-fast: false
      matrix:
        dominio: ${{ fromJSON(needs.get_dynamic_jobs.outputs.jobs) }}
    needs: [validate_deploy, get_last_tag,get_dynamic_jobs,validate_status_matrix_get_last_tag,validate_status_matrix_validate_deploy] 
    uses: nriofrio2508/my_reusable/.github/workflows/generate_pre_release.yml@main
    with:
      execute_matrix: ${{ contains(needs.validate_status_matrix_validate_deploy.outputs.matrix_status, matrix.dominio )}}
      matrix_dominio: ${{ matrix.dominio }}
    secrets: inherit

  promote_prd:
    runs-on: ubuntu-latest
    needs: generate_pre_release
    environment: promote_prd
    steps:
      - name: Promote prd step
        run: echo "waiting approve"

  validate_status_matrix_generate_pre_release:
    needs: [promote_prd]
    uses: nriofrio2508/my_reusable/.github/workflows/get_status_matrix.yml@main
    secrets: inherit
    with:
      status: "success"
      job_name: "generate_pre_release"

  generate_release:
    strategy:
      max-parallel: 20
      fail-fast: false
      matrix:
        dominio: ${{ fromJSON(needs.get_dynamic_jobs.outputs.jobs) }}
    needs: [validate_status_matrix_generate_pre_release,get_last_tag,get_dynamic_jobs]
    uses: nriofrio2508/my_reusable/.github/workflows/generate_release.yml@main
    secrets: inherit
    with:
      execute_matrix: ${{ contains(needs.validate_status_matrix_generate_pre_release.outputs.matrix_status, matrix.dominio )}}
      matrix_dominio: ${{ matrix.dominio }}

  validate_deploy_prd:
    runs-on: ubuntu-latest
    needs: generate_release
    steps:
      - name: Validate deploy prd
        run: echo "validate deploy PRD OK"
